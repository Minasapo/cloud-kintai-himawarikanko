/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api";
import { Configuration } from "./configuration";

const config: Configuration = {};

describe("AttendanceApi", () => {
  let instance: api.AttendanceApi;
  beforeEach(() => {
    instance = new api.AttendanceApi(config);
  });

  test("readAttendancesAttendancesStaffIdWorkDateGet", () => {
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.readAttendancesAttendancesStaffIdWorkDateGet(
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
  test("registerClockInAttendancesStaffIdWorkDateClockInPost", () => {
    const body: api.AttendanceClockIn = {
      summary: "通常",
      description: "通常の出勤として処理します。",
      value: {
        start_time: "09:00:00",
      },
    };
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.registerClockInAttendancesStaffIdWorkDateClockInPost(
        body,
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
  test("registerClockOutAttendancesStaffIdWorkDateClockOutPatch", () => {
    const body: api.AttendanceClockOut = {
      summary: "通常",
      description: "退勤時刻を登録します。",
      value: {
        end_time: "18:00:00",
      },
    };
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.registerClockOutAttendancesStaffIdWorkDateClockOutPatch(
        body,
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
  test("registerRemarksAttendancesStaffIdWorkDateRemarksPatch", () => {
    const body: api.AttendanceRemarks = {
      summary: "備考",
      description: "備考を登録します。",
      value: {
        remarks: "備考",
      },
    };
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.registerRemarksAttendancesStaffIdWorkDateRemarksPatch(
        body,
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
});

describe("DefaultApi", () => {
  let instance: api.DefaultApi;
  beforeEach(() => {
    instance = new api.DefaultApi(config);
  });

  test("rootGet", () => expect(instance.rootGet({})).resolves.toBe(null));
});

describe("RestApi", () => {
  let instance: api.RestApi;
  beforeEach(() => {
    instance = new api.RestApi(config);
  });

  test("readRestRestsStaffIdWorkDateGet", () => {
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.readRestRestsStaffIdWorkDateGet(staffId, workDate, {})
    ).resolves.toBe(null);
  });
  test("registerEndRestRestsStaffIdWorkDateEndPatch", () => {
    const body: api.RestEnd = {
      summary: "通常",
      description: "",
      value: {
        end_time: "13:00:00",
      },
    };
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.registerEndRestRestsStaffIdWorkDateEndPatch(
        body,
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
  test("registerStartRestRestsStaffIdWorkDateStartPost", () => {
    const body: api.RestStart = {
      summary: "通常",
      description: "",
      value: {
        start_time: "12:00:00",
      },
    };
    const staffId = 56;
    const workDate = 56;
    return expect(
      instance.registerStartRestRestsStaffIdWorkDateStartPost(
        body,
        staffId,
        workDate,
        {}
      )
    ).resolves.toBe(null);
  });
});

describe("StaffApi", () => {
  let instance: api.StaffApi;
  beforeEach(() => {
    instance = new api.StaffApi(config);
  });

  test("createStaffStaffsPost", () => {
    const body: api.StaffCreate = undefined;
    return expect(instance.createStaffStaffsPost(body, {})).resolves.toBe(null);
  });
  test("readStaffsStaffsStaffIdGet", () => {
    const staffId = 56;
    return expect(
      instance.readStaffsStaffsStaffIdGet(staffId, {})
    ).resolves.toBe(null);
  });
});
