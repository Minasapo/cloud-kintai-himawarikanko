/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Attendance
 */
export interface Attendance {
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    attendanceId: number;
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    parentAttendanceId?: number;
    /**
     * 
     * @type {number}
     * @memberof Attendance
     */
    staffId: number;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    workDate: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    endTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Attendance
     */
    goDirectlyFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Attendance
     */
    returnDirectlyFlag?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Attendance
     */
    remarks?: string;
}
/**
 * 
 * @export
 * @interface AttendanceClockIn
 */
export interface AttendanceClockIn {
    /**
     * 
     * @type {string}
     * @memberof AttendanceClockIn
     */
    startTime: string;
    /**
     * 
     * @type {boolean}
     * @memberof AttendanceClockIn
     */
    goDirectlyFlag: boolean;
}
/**
 * 
 * @export
 * @interface AttendanceClockOut
 */
export interface AttendanceClockOut {
    /**
     * 
     * @type {string}
     * @memberof AttendanceClockOut
     */
    endTime: string;
    /**
     * 
     * @type {boolean}
     * @memberof AttendanceClockOut
     */
    returnDirectlyFlag: boolean;
}
/**
 * 
 * @export
 * @interface AttendanceRemarks
 */
export interface AttendanceRemarks {
    /**
     * 
     * @type {string}
     * @memberof AttendanceRemarks
     */
    remarks: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Rest
 */
export interface Rest {
    /**
     * 
     * @type {number}
     * @memberof Rest
     */
    restTimeId: number;
    /**
     * 
     * @type {number}
     * @memberof Rest
     */
    parentRestTimeId?: number;
    /**
     * 
     * @type {number}
     * @memberof Rest
     */
    staffId: number;
    /**
     * 
     * @type {string}
     * @memberof Rest
     */
    workDate: string;
    /**
     * 
     * @type {string}
     * @memberof Rest
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof Rest
     */
    endTime?: string;
}
/**
 * 
 * @export
 * @interface RestEnd
 */
export interface RestEnd {
    /**
     * 
     * @type {string}
     * @memberof RestEnd
     */
    endTime: string;
}
/**
 * 
 * @export
 * @interface RestStart
 */
export interface RestStart {
    /**
     * 
     * @type {string}
     * @memberof RestStart
     */
    startTime: string;
}
/**
 * 
 * @export
 * @interface Staff
 */
export interface Staff {
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    mailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    iconPath?: string;
    /**
     * 
     * @type {number}
     * @memberof Staff
     */
    staffId: number;
}
/**
 * 
 * @export
 * @interface StaffCreate
 */
export interface StaffCreate {
    /**
     * 
     * @type {string}
     * @memberof StaffCreate
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof StaffCreate
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof StaffCreate
     */
    mailAddress: string;
    /**
     * 
     * @type {string}
     * @memberof StaffCreate
     */
    iconPath?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    loc: Array<string | number>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * AttendanceApi - fetch parameter creator
 * @export
 */
export const AttendanceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したIDの勤怠情報を取得します。
         * @summary スタッフIDで勤怠情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesAttendancesStaffIdWorkDateGet(staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling readAttendancesAttendancesStaffIdWorkDateGet.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling readAttendancesAttendancesStaffIdWorkDateGet.');
            }
            const localVarPath = `/attendances/{staff_id}/{work_date}`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 出勤
         * @param {AttendanceClockIn} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockInAttendancesStaffIdWorkDateClockInPost(body: AttendanceClockIn, staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerClockInAttendancesStaffIdWorkDateClockInPost.');
            }
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling registerClockInAttendancesStaffIdWorkDateClockInPost.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling registerClockInAttendancesStaffIdWorkDateClockInPost.');
            }
            const localVarPath = `/attendances/{staff_id}/{work_date}/clock_in`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AttendanceClockIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 退勤時刻を登録
         * @param {AttendanceClockOut} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body: AttendanceClockOut, staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerClockOutAttendancesStaffIdWorkDateClockOutPatch.');
            }
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling registerClockOutAttendancesStaffIdWorkDateClockOutPatch.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling registerClockOutAttendancesStaffIdWorkDateClockOutPatch.');
            }
            const localVarPath = `/attendances/{staff_id}/{work_date}/clock_out`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AttendanceClockOut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 備考を登録します。<br>
         * @summary 備考を登録
         * @param {AttendanceRemarks} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body: AttendanceRemarks, staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerRemarksAttendancesStaffIdWorkDateRemarksPatch.');
            }
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling registerRemarksAttendancesStaffIdWorkDateRemarksPatch.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling registerRemarksAttendancesStaffIdWorkDateRemarksPatch.');
            }
            const localVarPath = `/attendances/{staff_id}/{work_date}/remarks`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AttendanceRemarks" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceApi - functional programming interface
 * @export
 */
export const AttendanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 指定したIDの勤怠情報を取得します。
         * @summary スタッフIDで勤怠情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesAttendancesStaffIdWorkDateGet(staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Attendance> {
            const localVarFetchArgs = AttendanceApiFetchParamCreator(configuration).readAttendancesAttendancesStaffIdWorkDateGet(staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 出勤
         * @param {AttendanceClockIn} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockInAttendancesStaffIdWorkDateClockInPost(body: AttendanceClockIn, staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Attendance> {
            const localVarFetchArgs = AttendanceApiFetchParamCreator(configuration).registerClockInAttendancesStaffIdWorkDateClockInPost(body, staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 退勤時刻を登録
         * @param {AttendanceClockOut} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body: AttendanceClockOut, staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Attendance> {
            const localVarFetchArgs = AttendanceApiFetchParamCreator(configuration).registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body, staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 備考を登録します。<br>
         * @summary 備考を登録
         * @param {AttendanceRemarks} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body: AttendanceRemarks, staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Attendance> {
            const localVarFetchArgs = AttendanceApiFetchParamCreator(configuration).registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body, staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AttendanceApi - factory interface
 * @export
 */
export const AttendanceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 指定したIDの勤怠情報を取得します。
         * @summary スタッフIDで勤怠情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesAttendancesStaffIdWorkDateGet(staffId: number, workDate: number, options?: any) {
            return AttendanceApiFp(configuration).readAttendancesAttendancesStaffIdWorkDateGet(staffId, workDate, options)(fetch, basePath);
        },
        /**
         * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 出勤
         * @param {AttendanceClockIn} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockInAttendancesStaffIdWorkDateClockInPost(body: AttendanceClockIn, staffId: number, workDate: number, options?: any) {
            return AttendanceApiFp(configuration).registerClockInAttendancesStaffIdWorkDateClockInPost(body, staffId, workDate, options)(fetch, basePath);
        },
        /**
         * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
         * @summary 退勤時刻を登録
         * @param {AttendanceClockOut} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body: AttendanceClockOut, staffId: number, workDate: number, options?: any) {
            return AttendanceApiFp(configuration).registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body, staffId, workDate, options)(fetch, basePath);
        },
        /**
         * 備考を登録します。<br>
         * @summary 備考を登録
         * @param {AttendanceRemarks} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body: AttendanceRemarks, staffId: number, workDate: number, options?: any) {
            return AttendanceApiFp(configuration).registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body, staffId, workDate, options)(fetch, basePath);
        },
    };
};

/**
 * AttendanceApi - object-oriented interface
 * @export
 * @class AttendanceApi
 * @extends {BaseAPI}
 */
export class AttendanceApi extends BaseAPI {
    /**
     * 指定したIDの勤怠情報を取得します。
     * @summary スタッフIDで勤怠情報を取得
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public readAttendancesAttendancesStaffIdWorkDateGet(staffId: number, workDate: number, options?: any) {
        return AttendanceApiFp(this.configuration).readAttendancesAttendancesStaffIdWorkDateGet(staffId, workDate, options)(this.fetch, this.basePath);
    }

    /**
     * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * @summary 出勤
     * @param {AttendanceClockIn} body 
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public registerClockInAttendancesStaffIdWorkDateClockInPost(body: AttendanceClockIn, staffId: number, workDate: number, options?: any) {
        return AttendanceApiFp(this.configuration).registerClockInAttendancesStaffIdWorkDateClockInPost(body, staffId, workDate, options)(this.fetch, this.basePath);
    }

    /**
     * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * @summary 退勤時刻を登録
     * @param {AttendanceClockOut} body 
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body: AttendanceClockOut, staffId: number, workDate: number, options?: any) {
        return AttendanceApiFp(this.configuration).registerClockOutAttendancesStaffIdWorkDateClockOutPatch(body, staffId, workDate, options)(this.fetch, this.basePath);
    }

    /**
     * 備考を登録します。<br>
     * @summary 備考を登録
     * @param {AttendanceRemarks} body 
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body: AttendanceRemarks, staffId: number, workDate: number, options?: any) {
        return AttendanceApiFp(this.configuration).registerRemarksAttendancesStaffIdWorkDateRemarksPatch(body, staffId, workDate, options)(this.fetch, this.basePath);
    }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック用のエンドポイントです。
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options: any = {}): FetchArgs {
            const localVarPath = `/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ヘルスチェック用のエンドポイントです。
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).rootGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * ヘルスチェック用のエンドポイントです。
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any) {
            return DefaultApiFp(configuration).rootGet(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * ヘルスチェック用のエンドポイントです。
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: any) {
        return DefaultApiFp(this.configuration).rootGet(options)(this.fetch, this.basePath);
    }

}
/**
 * RestApi - fetch parameter creator
 * @export
 */
export const RestApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したIDと勤務日の休憩情報を取得します。
         * @summary 休憩情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRestRestsStaffIdWorkDateGet(staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling readRestRestsStaffIdWorkDateGet.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling readRestRestsStaffIdWorkDateGet.');
            }
            const localVarPath = `/rests/{staff_id}/{work_date}`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 休憩を終了します。<br>
         * @summary 休憩終了
         * @param {RestEnd} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEndRestRestsStaffIdWorkDateEndPatch(body: RestEnd, staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerEndRestRestsStaffIdWorkDateEndPatch.');
            }
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling registerEndRestRestsStaffIdWorkDateEndPatch.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling registerEndRestRestsStaffIdWorkDateEndPatch.');
            }
            const localVarPath = `/rests/{staff_id}/{work_date}/end`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RestEnd" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 休憩を開始します。<br>
         * @summary 休憩開始
         * @param {RestStart} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerStartRestRestsStaffIdWorkDateStartPost(body: RestStart, staffId: number, workDate: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling registerStartRestRestsStaffIdWorkDateStartPost.');
            }
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling registerStartRestRestsStaffIdWorkDateStartPost.');
            }
            // verify required parameter 'workDate' is not null or undefined
            if (workDate === null || workDate === undefined) {
                throw new RequiredError('workDate','Required parameter workDate was null or undefined when calling registerStartRestRestsStaffIdWorkDateStartPost.');
            }
            const localVarPath = `/rests/{staff_id}/{work_date}/start`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"work_date"}}`, encodeURIComponent(String(workDate)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RestStart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestApi - functional programming interface
 * @export
 */
export const RestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 指定したIDと勤務日の休憩情報を取得します。
         * @summary 休憩情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRestRestsStaffIdWorkDateGet(staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Rest> {
            const localVarFetchArgs = RestApiFetchParamCreator(configuration).readRestRestsStaffIdWorkDateGet(staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 休憩を終了します。<br>
         * @summary 休憩終了
         * @param {RestEnd} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEndRestRestsStaffIdWorkDateEndPatch(body: RestEnd, staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Rest> {
            const localVarFetchArgs = RestApiFetchParamCreator(configuration).registerEndRestRestsStaffIdWorkDateEndPatch(body, staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 休憩を開始します。<br>
         * @summary 休憩開始
         * @param {RestStart} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerStartRestRestsStaffIdWorkDateStartPost(body: RestStart, staffId: number, workDate: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Rest> {
            const localVarFetchArgs = RestApiFetchParamCreator(configuration).registerStartRestRestsStaffIdWorkDateStartPost(body, staffId, workDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RestApi - factory interface
 * @export
 */
export const RestApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 指定したIDと勤務日の休憩情報を取得します。
         * @summary 休憩情報を取得
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRestRestsStaffIdWorkDateGet(staffId: number, workDate: number, options?: any) {
            return RestApiFp(configuration).readRestRestsStaffIdWorkDateGet(staffId, workDate, options)(fetch, basePath);
        },
        /**
         * 休憩を終了します。<br>
         * @summary 休憩終了
         * @param {RestEnd} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEndRestRestsStaffIdWorkDateEndPatch(body: RestEnd, staffId: number, workDate: number, options?: any) {
            return RestApiFp(configuration).registerEndRestRestsStaffIdWorkDateEndPatch(body, staffId, workDate, options)(fetch, basePath);
        },
        /**
         * 休憩を開始します。<br>
         * @summary 休憩開始
         * @param {RestStart} body 
         * @param {number} staffId スタッフID
         * @param {number} workDate 勤務日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerStartRestRestsStaffIdWorkDateStartPost(body: RestStart, staffId: number, workDate: number, options?: any) {
            return RestApiFp(configuration).registerStartRestRestsStaffIdWorkDateStartPost(body, staffId, workDate, options)(fetch, basePath);
        },
    };
};

/**
 * RestApi - object-oriented interface
 * @export
 * @class RestApi
 * @extends {BaseAPI}
 */
export class RestApi extends BaseAPI {
    /**
     * 指定したIDと勤務日の休憩情報を取得します。
     * @summary 休憩情報を取得
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestApi
     */
    public readRestRestsStaffIdWorkDateGet(staffId: number, workDate: number, options?: any) {
        return RestApiFp(this.configuration).readRestRestsStaffIdWorkDateGet(staffId, workDate, options)(this.fetch, this.basePath);
    }

    /**
     * 休憩を終了します。<br>
     * @summary 休憩終了
     * @param {RestEnd} body 
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestApi
     */
    public registerEndRestRestsStaffIdWorkDateEndPatch(body: RestEnd, staffId: number, workDate: number, options?: any) {
        return RestApiFp(this.configuration).registerEndRestRestsStaffIdWorkDateEndPatch(body, staffId, workDate, options)(this.fetch, this.basePath);
    }

    /**
     * 休憩を開始します。<br>
     * @summary 休憩開始
     * @param {RestStart} body 
     * @param {number} staffId スタッフID
     * @param {number} workDate 勤務日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestApi
     */
    public registerStartRestRestsStaffIdWorkDateStartPost(body: RestStart, staffId: number, workDate: number, options?: any) {
        return RestApiFp(this.configuration).registerStartRestRestsStaffIdWorkDateStartPost(body, staffId, workDate, options)(this.fetch, this.basePath);
    }

}
/**
 * StaffApi - fetch parameter creator
 * @export
 */
export const StaffApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * スタッフ情報を登録します。
         * @summary スタッフ情報を登録
         * @param {StaffCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStaffStaffsPost(body: StaffCreate, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createStaffStaffsPost.');
            }
            const localVarPath = `/staffs/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StaffCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したIDのスタッフ情報を取得します。
         * @summary スタッフIDでスタッフ情報を取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStaffsStaffsStaffIdGet(staffId: number, options: any = {}): FetchArgs {
            // verify required parameter 'staffId' is not null or undefined
            if (staffId === null || staffId === undefined) {
                throw new RequiredError('staffId','Required parameter staffId was null or undefined when calling readStaffsStaffsStaffIdGet.');
            }
            const localVarPath = `/staffs/{staff_id}`
                .replace(`{${"staff_id"}}`, encodeURIComponent(String(staffId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffApi - functional programming interface
 * @export
 */
export const StaffApiFp = function(configuration?: Configuration) {
    return {
        /**
         * スタッフ情報を登録します。
         * @summary スタッフ情報を登録
         * @param {StaffCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStaffStaffsPost(body: StaffCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffApiFetchParamCreator(configuration).createStaffStaffsPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 指定したIDのスタッフ情報を取得します。
         * @summary スタッフIDでスタッフ情報を取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStaffsStaffsStaffIdGet(staffId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffApiFetchParamCreator(configuration).readStaffsStaffsStaffIdGet(staffId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StaffApi - factory interface
 * @export
 */
export const StaffApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * スタッフ情報を登録します。
         * @summary スタッフ情報を登録
         * @param {StaffCreate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStaffStaffsPost(body: StaffCreate, options?: any) {
            return StaffApiFp(configuration).createStaffStaffsPost(body, options)(fetch, basePath);
        },
        /**
         * 指定したIDのスタッフ情報を取得します。
         * @summary スタッフIDでスタッフ情報を取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStaffsStaffsStaffIdGet(staffId: number, options?: any) {
            return StaffApiFp(configuration).readStaffsStaffsStaffIdGet(staffId, options)(fetch, basePath);
        },
    };
};

/**
 * StaffApi - object-oriented interface
 * @export
 * @class StaffApi
 * @extends {BaseAPI}
 */
export class StaffApi extends BaseAPI {
    /**
     * スタッフ情報を登録します。
     * @summary スタッフ情報を登録
     * @param {StaffCreate} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public createStaffStaffsPost(body: StaffCreate, options?: any) {
        return StaffApiFp(this.configuration).createStaffStaffsPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 指定したIDのスタッフ情報を取得します。
     * @summary スタッフIDでスタッフ情報を取得
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApi
     */
    public readStaffsStaffsStaffIdGet(staffId: number, options?: any) {
        return StaffApiFp(this.configuration).readStaffsStaffsStaffIdGet(staffId, options)(this.fetch, this.basePath);
    }

}
