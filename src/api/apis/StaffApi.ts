/* tslint:disable */
/* eslint-disable */
/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Staff,
  StaffCreate,
  StaffUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StaffFromJSON,
    StaffToJSON,
    StaffCreateFromJSON,
    StaffCreateToJSON,
    StaffUpdateFromJSON,
    StaffUpdateToJSON,
} from '../models/index';

export interface CreateStaffRequest {
    staffCreate: StaffCreate;
}

export interface DeleteStaffRequest {
    staffId: number;
}

export interface GetStaffByIdRequest {
    staffId: number;
}

export interface GetStaffByMailAddressRequest {
    mailAddress: string;
}

export interface GetStaffsRequest {
    skip?: number;
    limit?: number;
}

export interface UpdateStaffRequest {
    staffId: number;
    staffUpdate: StaffUpdate;
}

/**
 * 
 */
export class StaffApi extends runtime.BaseAPI {

    /**
     * スタッフ情報を登録します。
     * スタッフ情報を登録
     */
    async createStaffRaw(requestParameters: CreateStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.staffCreate === null || requestParameters.staffCreate === undefined) {
            throw new runtime.RequiredError('staffCreate','Required parameter requestParameters.staffCreate was null or undefined when calling createStaff.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/staffs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaffCreateToJSON(requestParameters.staffCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * スタッフ情報を登録します。
     * スタッフ情報を登録
     */
    async createStaff(requestParameters: CreateStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.createStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スタッフ情報を削除します。
     * スタッフ情報を削除
     */
    async deleteStaffRaw(requestParameters: DeleteStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling deleteStaff.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/staffs/{staff_id}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * スタッフ情報を削除します。
     * スタッフ情報を削除
     */
    async deleteStaff(requestParameters: DeleteStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したIDのスタッフ情報を取得します。
     * スタッフIDでスタッフ情報を取得
     */
    async getStaffByIdRaw(requestParameters: GetStaffByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling getStaffById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/staffs/{staff_id}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * 指定したIDのスタッフ情報を取得します。
     * スタッフIDでスタッフ情報を取得
     */
    async getStaffById(requestParameters: GetStaffByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.getStaffByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したメールアドレスのスタッフ情報を取得します。
     * メールアドレスでスタッフ情報を取得
     */
    async getStaffByMailAddressRaw(requestParameters: GetStaffByMailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.mailAddress === null || requestParameters.mailAddress === undefined) {
            throw new runtime.RequiredError('mailAddress','Required parameter requestParameters.mailAddress was null or undefined when calling getStaffByMailAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/staffs/email/{mail_address}`.replace(`{${"mail_address"}}`, encodeURIComponent(String(requestParameters.mailAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * 指定したメールアドレスのスタッフ情報を取得します。
     * メールアドレスでスタッフ情報を取得
     */
    async getStaffByMailAddress(requestParameters: GetStaffByMailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.getStaffByMailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スタッフ一覧を取得します。
     * スタッフ一覧を取得
     */
    async getStaffsRaw(requestParameters: GetStaffsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Staff>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/staffs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaffFromJSON));
    }

    /**
     * スタッフ一覧を取得します。
     * スタッフ一覧を取得
     */
    async getStaffs(requestParameters: GetStaffsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Staff>> {
        const response = await this.getStaffsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スタッフ情報を更新します。
     * スタッフ情報を更新
     */
    async updateStaffRaw(requestParameters: UpdateStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling updateStaff.');
        }

        if (requestParameters.staffUpdate === null || requestParameters.staffUpdate === undefined) {
            throw new runtime.RequiredError('staffUpdate','Required parameter requestParameters.staffUpdate was null or undefined when calling updateStaff.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/staffs/{staff_id}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StaffUpdateToJSON(requestParameters.staffUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * スタッフ情報を更新します。
     * スタッフ情報を更新
     */
    async updateStaff(requestParameters: UpdateStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.updateStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
