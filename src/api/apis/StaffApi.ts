/* tslint:disable */
/* eslint-disable */
/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Staff,
  StaffCreate,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StaffFromJSON,
    StaffToJSON,
    StaffCreateFromJSON,
    StaffCreateToJSON,
} from '../models';

export interface CreateStaffStaffsPostRequest {
    staffCreate: StaffCreate;
}

export interface ReadStaffsStaffsStaffIdGetRequest {
    staffId: number;
}

/**
 * 
 */
export class StaffApi extends runtime.BaseAPI {

    /**
     * スタッフ情報を登録します。
     * スタッフ情報を登録
     */
    async createStaffStaffsPostRaw(requestParameters: CreateStaffStaffsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.staffCreate === null || requestParameters.staffCreate === undefined) {
            throw new runtime.RequiredError('staffCreate','Required parameter requestParameters.staffCreate was null or undefined when calling createStaffStaffsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staffs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaffCreateToJSON(requestParameters.staffCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * スタッフ情報を登録します。
     * スタッフ情報を登録
     */
    async createStaffStaffsPost(requestParameters: CreateStaffStaffsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.createStaffStaffsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定したIDのスタッフ情報を取得します。
     * スタッフIDでスタッフ情報を取得
     */
    async readStaffsStaffsStaffIdGetRaw(requestParameters: ReadStaffsStaffsStaffIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling readStaffsStaffsStaffIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staffs/{staff_id}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     * 指定したIDのスタッフ情報を取得します。
     * スタッフIDでスタッフ情報を取得
     */
    async readStaffsStaffsStaffIdGet(requestParameters: ReadStaffsStaffsStaffIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.readStaffsStaffsStaffIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
