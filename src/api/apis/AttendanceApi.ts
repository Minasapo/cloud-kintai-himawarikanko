/* tslint:disable */
/* eslint-disable */
/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attendance,
  AttendanceClockIn,
  AttendanceClockOut,
  AttendanceRemarks,
  HTTPValidationError,
  MonthlyAttendance,
} from '../models';
import {
    AttendanceFromJSON,
    AttendanceToJSON,
    AttendanceClockInFromJSON,
    AttendanceClockInToJSON,
    AttendanceClockOutFromJSON,
    AttendanceClockOutToJSON,
    AttendanceRemarksFromJSON,
    AttendanceRemarksToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MonthlyAttendanceFromJSON,
    MonthlyAttendanceToJSON,
} from '../models';

export interface GetAttendanceRequest {
    staffId: number;
    workDate: number;
}

export interface GetAttendancesRequest {
    staffId: number;
    fromWorkDate: number;
    toWorkDate: number;
}

export interface GetMonthlyAttendancesRequest {
    staffIds?: string;
    targetDateStart?: number;
    targetDateEnd?: number;
}

export interface RegisterClockInRequest {
    staffId: number;
    workDate: number;
    attendanceClockIn: AttendanceClockIn;
}

export interface RegisterClockOutRequest {
    staffId: number;
    workDate: number;
    attendanceClockOut: AttendanceClockOut;
}

export interface UpdateRemarksRequest {
    staffId: number;
    workDate: number;
    attendanceRemarks: AttendanceRemarks;
}

/**
 * 
 */
export class AttendanceApi extends runtime.BaseAPI {

    /**
     * 指定したIDの勤怠情報を取得します。
     * スタッフIDで勤怠情報を取得
     */
    async getAttendanceRaw(requestParameters: GetAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attendance>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling getAttendance.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling getAttendance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/attendances/{staff_id}/{work_date}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttendanceFromJSON(jsonValue));
    }

    /**
     * 指定したIDの勤怠情報を取得します。
     * スタッフIDで勤怠情報を取得
     */
    async getAttendance(requestParameters: GetAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attendance> {
        const response = await this.getAttendanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定した期間とスタッフIDで勤怠情報を取得します。
     * 期間とスタッフIDで勤怠情報を取得
     */
    async getAttendancesRaw(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Attendance>>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling getAttendances.');
        }

        if (requestParameters.fromWorkDate === null || requestParameters.fromWorkDate === undefined) {
            throw new runtime.RequiredError('fromWorkDate','Required parameter requestParameters.fromWorkDate was null or undefined when calling getAttendances.');
        }

        if (requestParameters.toWorkDate === null || requestParameters.toWorkDate === undefined) {
            throw new runtime.RequiredError('toWorkDate','Required parameter requestParameters.toWorkDate was null or undefined when calling getAttendances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/attendances/{staff_id}/{from_work_date}/{to_work_date}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"from_work_date"}}`, encodeURIComponent(String(requestParameters.fromWorkDate))).replace(`{${"to_work_date"}}`, encodeURIComponent(String(requestParameters.toWorkDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttendanceFromJSON));
    }

    /**
     * 指定した期間とスタッフIDで勤怠情報を取得します。
     * 期間とスタッフIDで勤怠情報を取得
     */
    async getAttendances(requestParameters: GetAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Attendance>> {
        const response = await this.getAttendancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定した期間とスタッフIDで月別勤怠情報を取得します。
     * 月別勤怠情報を取得
     */
    async getMonthlyAttendancesRaw(requestParameters: GetMonthlyAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MonthlyAttendance>>> {
        const queryParameters: any = {};

        if (requestParameters.staffIds !== undefined) {
            queryParameters['staff_ids'] = requestParameters.staffIds;
        }

        if (requestParameters.targetDateStart !== undefined) {
            queryParameters['target_date_start'] = requestParameters.targetDateStart;
        }

        if (requestParameters.targetDateEnd !== undefined) {
            queryParameters['target_date_end'] = requestParameters.targetDateEnd;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/attendances/monthly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonthlyAttendanceFromJSON));
    }

    /**
     * 指定した期間とスタッフIDで月別勤怠情報を取得します。
     * 月別勤怠情報を取得
     */
    async getMonthlyAttendances(requestParameters: GetMonthlyAttendancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MonthlyAttendance>> {
        const response = await this.getMonthlyAttendancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * 出勤
     */
    async registerClockInRaw(requestParameters: RegisterClockInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attendance>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling registerClockIn.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling registerClockIn.');
        }

        if (requestParameters.attendanceClockIn === null || requestParameters.attendanceClockIn === undefined) {
            throw new runtime.RequiredError('attendanceClockIn','Required parameter requestParameters.attendanceClockIn was null or undefined when calling registerClockIn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/attendances/{staff_id}/{work_date}/clock_in`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttendanceClockInToJSON(requestParameters.attendanceClockIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttendanceFromJSON(jsonValue));
    }

    /**
     * 出勤方法は、`通常`と`直行`の2つ方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`start_time`を指定してください。<br>         `go_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直行**<br>         直行でリクエストする場合は、`go_directly_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * 出勤
     */
    async registerClockIn(requestParameters: RegisterClockInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attendance> {
        const response = await this.registerClockInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * 退勤時刻を登録
     */
    async registerClockOutRaw(requestParameters: RegisterClockOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attendance>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling registerClockOut.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling registerClockOut.');
        }

        if (requestParameters.attendanceClockOut === null || requestParameters.attendanceClockOut === undefined) {
            throw new runtime.RequiredError('attendanceClockOut','Required parameter requestParameters.attendanceClockOut was null or undefined when calling registerClockOut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/attendances/{staff_id}/{work_date}/clock_out`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttendanceClockOutToJSON(requestParameters.attendanceClockOut),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttendanceFromJSON(jsonValue));
    }

    /**
     * 退勤方法は、`通常`と`直帰`の2つの方法で登録することができます。<br>         <br>         **通常**<br>         通常でリクエストする場合は、`end_time`を指定してください。<br>         `return_directly_flag`は自動で`false`として処理されます。<br>         <br>         **直帰**<br>         直帰でリクエストする場合は、`return_direct_flag`を`true`にしてください。<br>         `start_time`は自動で`09:00:00`として処理されます。<br>
     * 退勤時刻を登録
     */
    async registerClockOut(requestParameters: RegisterClockOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attendance> {
        const response = await this.registerClockOutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 備考を登録します。<br>
     * 備考を登録
     */
    async updateRemarksRaw(requestParameters: UpdateRemarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Attendance>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling updateRemarks.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling updateRemarks.');
        }

        if (requestParameters.attendanceRemarks === null || requestParameters.attendanceRemarks === undefined) {
            throw new runtime.RequiredError('attendanceRemarks','Required parameter requestParameters.attendanceRemarks was null or undefined when calling updateRemarks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/attendances/{staff_id}/{work_date}/remarks`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AttendanceRemarksToJSON(requestParameters.attendanceRemarks),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttendanceFromJSON(jsonValue));
    }

    /**
     * 備考を登録します。<br>
     * 備考を登録
     */
    async updateRemarks(requestParameters: UpdateRemarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Attendance> {
        const response = await this.updateRemarksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
