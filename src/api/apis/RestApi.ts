/* tslint:disable */
/* eslint-disable */
/**
 * クラウド勤怠システム
 *  社内向けの勤怠管理システムです。 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Rest,
  RestEnd,
  RestStart,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RestFromJSON,
    RestToJSON,
    RestEndFromJSON,
    RestEndToJSON,
    RestStartFromJSON,
    RestStartToJSON,
} from '../models';

export interface GetRestRequest {
    staffId: number;
    workDate: number;
}

export interface GetRestsRequest {
    staffId: number;
    fromWorkDate: number;
    toWorkDate: number;
}

export interface RegisterEndRestRequest {
    staffId: number;
    workDate: number;
    restEnd: RestEnd;
}

export interface RegisterStartRestRequest {
    staffId: number;
    workDate: number;
    restStart: RestStart;
}

/**
 * 
 */
export class RestApi extends runtime.BaseAPI {

    /**
     * 指定したIDと勤務日の休憩情報を取得します。
     * スタッフIDで休憩情報を取得
     */
    async getRestRaw(requestParameters: GetRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rest>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling getRest.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling getRest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rests/{staff_id}/{work_date}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestFromJSON(jsonValue));
    }

    /**
     * 指定したIDと勤務日の休憩情報を取得します。
     * スタッフIDで休憩情報を取得
     */
    async getRest(requestParameters: GetRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rest> {
        const response = await this.getRestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定した期間とスタッフIDの休憩情報を取得します。
     * 期間とスタッフIDで休憩情報を取得
     */
    async getRestsRaw(requestParameters: GetRestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rest>>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling getRests.');
        }

        if (requestParameters.fromWorkDate === null || requestParameters.fromWorkDate === undefined) {
            throw new runtime.RequiredError('fromWorkDate','Required parameter requestParameters.fromWorkDate was null or undefined when calling getRests.');
        }

        if (requestParameters.toWorkDate === null || requestParameters.toWorkDate === undefined) {
            throw new runtime.RequiredError('toWorkDate','Required parameter requestParameters.toWorkDate was null or undefined when calling getRests.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rests/{staff_id}/{from_work_date}/{to_work_date}`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"from_work_date"}}`, encodeURIComponent(String(requestParameters.fromWorkDate))).replace(`{${"to_work_date"}}`, encodeURIComponent(String(requestParameters.toWorkDate))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RestFromJSON));
    }

    /**
     * 指定した期間とスタッフIDの休憩情報を取得します。
     * 期間とスタッフIDで休憩情報を取得
     */
    async getRests(requestParameters: GetRestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rest>> {
        const response = await this.getRestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 休憩を終了します。<br>
     * 休憩終了
     */
    async registerEndRestRaw(requestParameters: RegisterEndRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rest>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling registerEndRest.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling registerEndRest.');
        }

        if (requestParameters.restEnd === null || requestParameters.restEnd === undefined) {
            throw new runtime.RequiredError('restEnd','Required parameter requestParameters.restEnd was null or undefined when calling registerEndRest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rests/{staff_id}/{work_date}/end`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RestEndToJSON(requestParameters.restEnd),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestFromJSON(jsonValue));
    }

    /**
     * 休憩を終了します。<br>
     * 休憩終了
     */
    async registerEndRest(requestParameters: RegisterEndRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rest> {
        const response = await this.registerEndRestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 休憩を開始します。<br>
     * 休憩開始
     */
    async registerStartRestRaw(requestParameters: RegisterStartRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rest>> {
        if (requestParameters.staffId === null || requestParameters.staffId === undefined) {
            throw new runtime.RequiredError('staffId','Required parameter requestParameters.staffId was null or undefined when calling registerStartRest.');
        }

        if (requestParameters.workDate === null || requestParameters.workDate === undefined) {
            throw new runtime.RequiredError('workDate','Required parameter requestParameters.workDate was null or undefined when calling registerStartRest.');
        }

        if (requestParameters.restStart === null || requestParameters.restStart === undefined) {
            throw new runtime.RequiredError('restStart','Required parameter requestParameters.restStart was null or undefined when calling registerStartRest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rests/{staff_id}/{work_date}/start`.replace(`{${"staff_id"}}`, encodeURIComponent(String(requestParameters.staffId))).replace(`{${"work_date"}}`, encodeURIComponent(String(requestParameters.workDate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestStartToJSON(requestParameters.restStart),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestFromJSON(jsonValue));
    }

    /**
     * 休憩を開始します。<br>
     * 休憩開始
     */
    async registerStartRest(requestParameters: RegisterStartRestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rest> {
        const response = await this.registerStartRestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
